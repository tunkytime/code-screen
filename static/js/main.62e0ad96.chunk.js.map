{"version":3,"sources":["components/Palindrome.js","components/ChuckNorris.js","components/Stats.js","App.js","serviceWorker.js","index.js"],"names":["Palindrome","n","useState","number","setNumber","className","toString","split","reverse","join","value","onChange","e","target","placeholder","type","name","ChuckNorris","category","setCategory","jokeByCategory","setJokeByCategory","query","setQuery","jokeByQuery","setJokeByQuery","categoryError","setCategoryError","queryError","setQueryError","style","marginTop","onClick","axios","get","then","res","console","log","data","catch","jokeCategory","result","jokeSearch","Stats","numbers","setNumbers","stats","setStats","createArrayOfNumbers","str","trim","numArr","push","parseInt","findMean","array","reduce","sum","length","standardDeviation","mean","squareDiffs","map","diff","meanSquareDiff","Math","sqrt","previous","current","sort","a","b","min","max","lowMiddle","floor","highMiddle","ceil","median","Mean","Min","Max","Median","Sum","StdDev","calculateStats","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.62e0ad96.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nconst Palindrome = () => {\r\n  const [number, setNumber] = useState(\"\");\r\n\r\n  const isPalindrome = n => {\r\n    return (\r\n      n\r\n        .toString()\r\n        .split(\"\")\r\n        .reverse()\r\n        .join(\"\") === n.toString()\r\n    );\r\n  };\r\n\r\n  return (\r\n    <section className=\"question\">\r\n      <h3>Problem #1: Integer Palindrome</h3>\r\n      {number ? (\r\n        <>{isPalindrome(number) ? <p>True</p> : <p>False</p>}</>\r\n      ) : (\r\n        <p>\r\n          Enter a number, I will check to see if the string of that number is a\r\n          palindrome...\r\n        </p>\r\n      )}\r\n      <input\r\n        value={number}\r\n        onChange={e => setNumber(e.target.value)}\r\n        placeholder=\"Number\"\r\n        type=\"number\"\r\n        name=\"number\"\r\n      />\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Palindrome;\r\n","import React, { useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst ChuckNorris = () => {\r\n  const [category, setCategory] = useState(\"\");\r\n  const [jokeByCategory, setJokeByCategory] = useState(null);\r\n  const [query, setQuery] = useState(\"\");\r\n  const [jokeByQuery, setJokeByQuery] = useState(null);\r\n  const [categoryError, setCategoryError] = useState(null);\r\n  const [queryError, setQueryError] = useState(null);\r\n\r\n  const jokeCategory = category => {\r\n    setCategoryError(null);\r\n    axios\r\n      .get(`https://api.chucknorris.io/jokes/random?category=${category}`)\r\n      .then(res => {\r\n        console.log(res);\r\n        setJokeByCategory(res.data.value);\r\n        return res;\r\n      })\r\n      .catch(e => {\r\n        console.log(e);\r\n        setCategoryError(e);\r\n        return null;\r\n      });\r\n  };\r\n\r\n  const jokeSearch = query => {\r\n    setQueryError(null);\r\n    axios\r\n      .get(`https://api.chucknorris.io/jokes/search?query=${query}`)\r\n      .then(res => {\r\n        console.log(res);\r\n        setJokeByQuery(res.data.result[0].value);\r\n        return res;\r\n      })\r\n      .catch(e => {\r\n        console.log(e);\r\n        setQueryError(e);\r\n        return null;\r\n      });\r\n  };\r\n\r\n  return (\r\n    <section className=\"question\">\r\n      <h3>Problem #2: Chuck Norris API</h3>\r\n\r\n      {/* search by category */}\r\n      <div>\r\n        {categoryError ? (\r\n          <p>Hmm... try searching something else</p>\r\n        ) : (\r\n          <p>{jokeByCategory}</p>\r\n        )}\r\n        <input\r\n          value={category}\r\n          onChange={e => setCategory(e.target.value)}\r\n          placeholder=\"Category\"\r\n          type=\"text\"\r\n          name=\"category\"\r\n        />\r\n        <br></br>\r\n        <button\r\n          style={{ marginTop: 10 }}\r\n          className=\"btn\"\r\n          onClick={() => jokeCategory(category)}\r\n        >\r\n          Search by Category\r\n        </button>\r\n      </div>\r\n\r\n      {/* search by query string */}\r\n      <div style={{ marginTop: 20 }}>\r\n        {queryError ? (\r\n          <p>Hmm... try a different search</p>\r\n        ) : (\r\n          <p>{jokeByQuery}</p>\r\n        )}\r\n        <input\r\n          value={query}\r\n          onChange={e => setQuery(e.target.value)}\r\n          placeholder=\"String\"\r\n          type=\"text\"\r\n          name=\"query\"\r\n        />\r\n        <br></br>\r\n        <button\r\n          style={{ marginTop: 10 }}\r\n          className=\"btn\"\r\n          onClick={() => jokeSearch(query)}\r\n        >\r\n          Search by String\r\n        </button>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default ChuckNorris;\r\n","import React, { useState } from \"react\";\r\n\r\nconst Stats = () => {\r\n  const [numbers, setNumbers] = useState(\"\");\r\n  const [stats, setStats] = useState({});\r\n\r\n  // Problem #3: Stat Calculation\r\n  const calculateStats = str => {\r\n    let array = createArrayOfNumbers(str);\r\n\r\n    // sum calculation\r\n    let sum = array.reduce((previous, current) => (current += previous));\r\n\r\n    // mean calculation\r\n    let mean = findMean(array);\r\n\r\n    // min calculation\r\n    array.sort((a, b) => a - b);\r\n    let min = array[0];\r\n\r\n    // max calculation\r\n    array.sort((a, b) => b - a);\r\n    let max = array[0];\r\n\r\n    // median calculation\r\n    array.sort((a, b) => a - b);\r\n    let lowMiddle = Math.floor((array.length - 1) / 2);\r\n    let highMiddle = Math.ceil((array.length - 1) / 2);\r\n    let median = (array[lowMiddle] + array[highMiddle]) / 2;\r\n\r\n    setStats({\r\n      Mean: mean,\r\n      Min: min,\r\n      Max: max,\r\n      Median: median,\r\n      Sum: sum,\r\n      StdDev: standardDeviation(array, mean)\r\n    });\r\n  };\r\n\r\n  // helper functions\r\n  const createArrayOfNumbers = str => {\r\n    str = str.trim().split(\" \");\r\n    let numArr = [];\r\n    for (const e of str) {\r\n      numArr.push(parseInt(e));\r\n    }\r\n    return numArr;\r\n  };\r\n\r\n  const findMean = array => {\r\n    let sum = array.reduce((sum, value) => {\r\n      return sum + value;\r\n    }, 0);\r\n\r\n    let mean = sum / array.length;\r\n    return mean;\r\n  };\r\n\r\n  const standardDeviation = (array, mean) => {\r\n    let squareDiffs = array.map(value => {\r\n      let diff = value - mean;\r\n      let sqrDiff = diff * diff;\r\n      return sqrDiff;\r\n    });\r\n\r\n    let meanSquareDiff = findMean(squareDiffs);\r\n\r\n    let stdDev = Math.sqrt(meanSquareDiff);\r\n    return stdDev;\r\n  };\r\n\r\n  return (\r\n    <section className=\"question\">\r\n      <h3>Problem #3: Stat Calculation</h3>\r\n      <input\r\n        value={numbers}\r\n        onChange={e => setNumbers(e.target.value)}\r\n        placeholder=\"Numbers\"\r\n        type=\"text\"\r\n        name=\"numbers\"\r\n      />\r\n      <br></br>\r\n      <button\r\n        style={{ marginTop: 10 }}\r\n        className=\"btn\"\r\n        onClick={() => calculateStats(numbers)}\r\n      >\r\n        Calculate Stats\r\n      </button>\r\n      <ul>\r\n        <li>Mean: {stats.Sum}</li>\r\n        <li>Min: {stats.Min}</li>\r\n        <li>Max: {stats.Max}</li>\r\n        <li>Median: {stats.Median}</li>\r\n        <li>Sum: {stats.Sum}</li>\r\n        <li>Standard Deviation: {stats.StdDev}</li>\r\n      </ul>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Stats;\r\n","import React, { useState } from \"react\";\r\nimport Palindrome from \"./components/Palindrome\";\r\nimport ChuckNorris from \"./components/ChuckNorris\";\r\nimport Stats from \"./components/Stats\";\r\nimport \"./App.css\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className=\"container\">\r\n      <h1>Code Screen</h1>\r\n      <Palindrome />\r\n      <ChuckNorris />\r\n      <Stats />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}